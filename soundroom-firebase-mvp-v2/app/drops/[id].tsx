
import { useEffect, useState } from 'react'; import { useLocalSearchParams } from 'expo-router'; import { ScrollView, Text, View, Pressable, Alert } from 'react-native'; import { theme } from '@/lib/theme'; import { usePlayer } from '@/lib/player'; import seed from '@/data/seed.json'; import { auth, db } from '@/lib/firebase'; import { doc, getDoc } from 'firebase/firestore';
export default function Drop(){ const {id,handle}=useLocalSearchParams() as any; const [drop,setDrop]=useState<any>(null); const [allowed,setAllowed]=useState(false); const {play,pause,resume,stop}=usePlayer();
useEffect(()=>{(async()=>{ try{const d=await getDoc(doc(db,'artists',handle,'drops',id)); if(d.exists()) setDrop({id,...d.data()});}catch{} if(!drop){ const all=seed.artists.flatMap(a=>a.drops.map(dr=>({...dr,handle:a.handle}))); const f=all.find(x=>x.id===id)||all[0]; setDrop(f);} })();},[id,handle]);
useEffect(()=>{(async()=>{ if(!auth.currentUser||!handle){setAllowed(False); return;} const subId=`${auth.currentUser.uid}_${handle}`; const s=await getDoc(doc(db,'subscriptions',subId)); setAllowed(!!s.exists() && s.data()?.active); })();},[auth.currentUser,handle]);
if(!drop) return null; const playTrack=(url:string)=>{ if(allowed){ play(url); } else { play(url,30); Alert.alert('Preview only','Subscribe to hear the full track.'); } };
return (<ScrollView style={{backgroundColor:theme.bg,padding:16}}><Text style={{color:theme.text,fontSize:24,fontWeight:'800',marginBottom:8}}>{drop.title}</Text><Text style={{color:theme.subtext,marginBottom:16}}>{drop.description}</Text>
{drop.tracks?.map((t:any)=>(<View key={t.id} style={{backgroundColor:theme.card,borderRadius:12,padding:12,marginBottom:12}}><Text style={{color:theme.text,fontSize:18,fontWeight:'700'}}>{t.title}</Text>
<View style={{flexDirection:'row',gap:12,marginTop:8}}><Pressable onPress={()=>playTrack(t.url)}><Text style={{color:theme.neon}}>Play</Text></Pressable><Pressable onPress={pause}><Text style={{color:theme.neon}}>Pause</Text></Pressable><Pressable onPress={resume}><Text style={{color:theme.neon}}>Resume</Text></Pressable><Pressable onPress={stop}><Text style={{color:theme.neon}}>Stop</Text></Pressable></View></View>))}</ScrollView>); }
